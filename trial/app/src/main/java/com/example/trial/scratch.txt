package com.example.trial;

import android.bluetooth.BluetoothAdapter;
import android.bluetooth.BluetoothDevice;
import android.bluetooth.BluetoothGatt;
import android.bluetooth.BluetoothGattCallback;
import android.bluetooth.BluetoothManager;
import android.bluetooth.le.ScanCallback;
import android.bluetooth.le.ScanFilter;
import android.bluetooth.le.ScanSettings;
import android.content.Context;
import android.content.pm.PackageManager;
import android.os.Bundle;
import android.os.Handler;
import android.widget.TextView;
import android.widget.Toast;

import androidx.appcompat.app.AppCompatActivity;

import java.util.Collections;
import java.util.UUID;

public class MainActivity2 extends AppCompatActivity {

    private TextView statusTextView;
    private BluetoothManager bluetoothManager;
    private BluetoothAdapter bluetoothAdapter;
    private BluetoothGatt bluetoothGatt;
    private UUID ambientHeartRateServiceUUID = UUID.fromString("0000180D-0000-1000-8000-00805F9B34FB");
    private Handler handler = new Handler();
    private int scanCount = 0;
    private boolean arduinoFound = false;

    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.activity_main2);

        statusTextView = findViewById(R.id.statusTextView);
        bluetoothManager = (BluetoothManager) getSystemService(Context.BLUETOOTH_SERVICE);
        bluetoothAdapter = bluetoothManager.getAdapter();

        // Check if the device has BLE support
        if (!getPackageManager().hasSystemFeature(PackageManager.FEATURE_BLUETOOTH_LE)) {
            Toast.makeText(this, "BLE not supported on this device.", Toast.LENGTH_LONG).show();
            return;
        }

        statusTextView.setText("Scanning for Arduino...");

        // Start scanning for Arduino device by name
        startScanningForArduino("AmbientMonitor");
    }

    private void startScanningForArduino(String deviceName) {
        if (arduinoFound) {
            return; // Stop scanning if Arduino is found
        }

        ScanFilter scanFilter = new ScanFilter.Builder()
                .setDeviceName(deviceName)
                .build();

        ScanSettings scanSettings = new ScanSettings.Builder()
                .setScanMode(ScanSettings.SCAN_MODE_LOW_LATENCY)
                .build();

        bluetoothAdapter.getBluetoothLeScanner().startScan(
                Collections.singletonList(scanFilter),
                scanSettings,
                new ScanCallback() {
                    @Override
                    public void onScanResult(int callbackType, android.bluetooth.le.ScanResult result) {
                        super.onScanResult(callbackType, result);

                        // You found the device by name
                        BluetoothDevice device = result.getDevice();
                        arduinoFound = true; // Set arduinoFound to true
                        stopScanning();
                        connectToArduino(device);
                    }
                }
        );

        scanCount++; // Increment the scan count
        statusTextView.setText("Scanning for Arduino (" + scanCount + " times)");

        if (!arduinoFound) {
            // Schedule a periodic scan (e.g., every 10 seconds) if Arduino is not found
            handler.postDelayed(new Runnable() {
                @Override
                public void run() {
                    startScanningForArduino(deviceName);
                }
            }, 10000); // 10 seconds in milliseconds
        }
    }

    private void stopScanning() {
        arduinoFound = true; // Set arduinoFound to true
        bluetoothAdapter.getBluetoothLeScanner().stopScan(new ScanCallback() {
            // Empty scan callback
        });
    }

    private void connectToArduino(BluetoothDevice device) {
        statusTextView.setText("Connected to Arduino");
        // Connection established, you can now perform additional operations
    }
}
